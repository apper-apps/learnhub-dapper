[
  {
    "Id": 1,
    "title": "2024년 프론트엔드 개발 트렌드",
    "content": "<h2>2024년 프론트엔드 개발 트렌드</h2><p>올해 프론트엔드 개발 생태계는 많은 변화를 겪고 있습니다. <strong>서버 컴포넌트</strong>, <strong>스트리밍 SSR</strong>, <strong>엣지 컴퓨팅</strong> 등이 주요 트렌드로 떠오르고 있습니다.</p><h3>주요 트렌드</h3><ul><li>React 18의 동시성 기능 활용</li><li>Next.js App Router의 안정화</li><li>서버 컴포넌트의 실무 적용</li><li>TypeScript 5.0의 새로운 기능들</li></ul><p>이러한 트렌드들은 개발자 경험과 사용자 경험 모두를 향상시키는 방향으로 발전하고 있습니다.</p>",
    "thumbnailUrl": "https://images.unsplash.com/photo-1627398242454-45a1465c2479?w=400&q=80",
    "allowedRoles": ["free", "member", "master", "both", "admin"],
    "publishedAt": "2024-01-15T09:00:00Z"
  },
  {
    "Id": 2,
    "title": "React Server Components 완벽 가이드",
    "content": "<h2>React Server Components란?</h2><p>React Server Components는 서버에서 실행되는 새로운 유형의 React 컴포넌트입니다. 클라이언트 번들 크기를 줄이고 서버의 리소스를 활용할 수 있게 해줍니다.</p><h3>주요 장점</h3><ul><li>번들 크기 감소</li><li>서버 리소스 직접 접근</li><li>초기 로딩 성능 향상</li><li>SEO 개선</li></ul><p>하지만 <em>상태 관리</em>나 <em>이벤트 핸들러</em>는 사용할 수 없다는 제약이 있습니다.</p><blockquote>서버 컴포넌트는 정적인 콘텐츠나 데이터 페칭에 특히 유용합니다.</blockquote>",
    "thumbnailUrl": "https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=400&q=80",
    "allowedRoles": ["member", "master", "both", "admin"],
    "publishedAt": "2024-01-20T14:30:00Z"
  },
  {
    "Id": 3,
    "title": "성능 최적화 실무 노하우",
    "content": "<h2>웹 성능 최적화의 핵심 원칙</h2><p>성능 최적화는 단순히 로딩 시간을 줄이는 것이 아닙니다. <strong>사용자 경험 전체</strong>를 고려해야 합니다.</p><h3>측정 지표</h3><ul><li><strong>FCP (First Contentful Paint)</strong>: 첫 콘텐츠 렌더링 시간</li><li><strong>LCP (Largest Contentful Paint)</strong>: 가장 큰 콘텐츠 렌더링 시간</li><li><strong>CLS (Cumulative Layout Shift)</strong>: 레이아웃 이동 누적 점수</li><li><strong>FID (First Input Delay)</strong>: 첫 입력 지연 시간</li></ul><h3>최적화 전략</h3><ol><li>코드 스플리팅과 지연 로딩</li><li>이미지 최적화 (WebP, AVIF)</li><li>번들 분석과 불필요한 의존성 제거</li><li>캐싱 전략 수립</li></ol><p>실제 프로젝트에서는 이 모든 것을 체계적으로 적용해야 합니다.</p>",
    "thumbnailUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=400&q=80",
    "allowedRoles": ["master", "both", "admin"],
    "publishedAt": "2024-01-25T11:15:00Z"
  },
  {
    "Id": 4,
    "title": "TypeScript 고급 타입 시스템 활용법",
    "content": "<h2>TypeScript의 강력한 타입 시스템</h2><p>TypeScript는 단순한 정적 타입 체커가 아닙니다. 강력한 타입 시스템을 통해 <strong>컴파일 타임에 많은 오류를 방지</strong>할 수 있습니다.</p><h3>고급 타입 기법</h3><ul><li><code>Conditional Types</code>: 조건부 타입</li><li><code>Mapped Types</code>: 매핑된 타입</li><li><code>Template Literal Types</code>: 템플릿 리터럴 타입</li><li><code>Utility Types</code>: 유틸리티 타입</li></ul><p>예제 코드:</p><pre><code>type ApiResponse&lt;T&gt; = {\n  data: T;\n  status: 'success' | 'error';\n  message?: string;\n};</code></pre><p>이런 패턴들을 잘 활용하면 더 안전하고 유지보수성이 좋은 코드를 작성할 수 있습니다.</p>",
    "thumbnailUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?w=400&q=80",
    "allowedRoles": ["free", "member", "master", "both", "admin"],
    "publishedAt": "2024-02-01T16:45:00Z"
  }
]